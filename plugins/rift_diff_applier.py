"""Rift Diff Applier Plugin."""
import idaapi
import ida_kernwin
import idautils
import idc
from rift_ida_lib.rift_func_matcher import RIFTFuncMatcher
from rift_ida_lib import rift_idautils
from rift_ida_lib import rift_ida_hooks
from rift_ida_lib.rift_func_window import RIFTFuncWindow
import os

ACTION_DISPLAY_MATCHES = "rift:display_matches"
ACTION_DISPLAY_MATCHES_HOTKEY = "CTRL+X"
ACTION_RENAME_TOP = "rift:rename_top"


class RIFTDiffApplierForm(ida_kernwin.Form):

    def __init__(self):
        form = r"""RIFT Diff Applier
    <#Import JSON file:{input_file}>
    Features & Configuration:
    <<##Enable auto renaming:{r_enable_auto_rename}><##Enable name demangling:{r_enable_name_demangling}>{group_features}>
    <#Select ratio:{input_min_ratio}><#Select auto rename ratio:{input_min_auto_ratio}>
    """
        
        args = {
            "input_file": ida_kernwin.Form.FileInput(open=True, swidth=40, hlp="JSON file (*.json)"),
            "input_min_ratio": ida_kernwin.Form.StringInput(value="0.7", swidth=22), # Form.NumericInput cannot take float values.
            "input_min_auto_ratio": ida_kernwin.Form.StringInput(value="0.8", swidth=22), # Form.NumericInput cannot take float values.
            "group_features": ida_kernwin.Form.ChkGroupControl(
                (
                    "r_enable_auto_rename",
                    "r_enable_name_demangling",
                )
            ),
        }

        ida_kernwin.Form.__init__(self, form, args)


class RIFTDiffApplier(idaapi.plugin_t):

    flags = idaapi.PLUGIN_FIX
    comment = "RIFT Diff Applier"
    help = "Applies diffing information generated by RIFT Client"
    wanted_name = "RIFTDiffApplier"
    wanted_hotkey = ""
    dialog = None

    def init(self):

        print("[debug] Initializing RIFT Diff Applier ..")
        enable_name_demangling = True
        # path = r"C:\ThreatIntel\RustReverseEngineering\TestCases\SPICA\RIFT_Artefacts\SPICA_DiffDb.json"
        # self.fm = RIFTFuncMatcher(path)


        # Once user decides to run the plugin
        # we install the action handlers. Before that, there is no need to
        # because JSON file is not loaded yet
        self.fm = None
        self.fwindow = None
        self.json_path = None
        self.ui_hook = rift_idautils.ContextHooks()
        self.menu_actions = []
  
        return idaapi.PLUGIN_KEEP

    def run(self, arg):

        user_config = self.__get_user_config()
        if user_config is None:
            return 0
        
        try:
            self.fm = RIFTFuncMatcher(user_config["json_file"], min_ratio=user_config["min_ratio"])
        except Exception as e:
            print(e)
            print(f"[debug] Could not initialize RIFTFuncMatcher!")
            return 0
        

        self.fwindow = RIFTFuncWindow()
        self.fwindow.Show("RIFT")
        self.menu_actions = [
            idaapi.action_desc_t("rift:display_matches", 
                                 "Display matches", 
                                 rift_ida_hooks.FuncMatcherHandler(self.fm, user_config["enable_name_demangling"], self.fwindow), 
                                 ACTION_DISPLAY_MATCHES_HOTKEY, 
                                 "Display top matching functions", 
                                 0)]
        # register menu actions and their corresponding hotkeys
        for action in self.menu_actions:
            idaapi.register_action(action)

        # enable context menu features
        self.ui_hook.hook()

        if user_config["enable_auto_rename"]:
            print("[debug] AutoRenaming enabled, running now!")


    def __get_user_config(self):
        """Populate RIFTDiffApplierForm, collected configured values"""
        form = RIFTDiffApplierForm()
        form.Compile()
        user_config = {"json_file": "", 
                       "min_ratio": 0.0,
                       "min_auto_ratio": 0.0,
                       "enable_auto_rename": False,
                       "enable_name_demangling": False}

        if form.Execute() != 1:
            return None
        json_file =  form.input_file.value
        min_ratio = form.input_min_ratio.value
        min_auto_ratio = form.input_min_auto_ratio.value

        if not os.path.isfile(json_file):
            print(f"[debug] {json_file} does not exist!")
            return None
        try:
            user_config["min_ratio"] = float(min_ratio)
            user_config["min_auto_ratio"] = float(min_auto_ratio)
            user_config["enable_auto_rename"] = form.r_enable_auto_rename.checked
            user_config["enable_name_demangling"] = form.r_enable_name_demangling.checked
            user_config["json_file"] = json_file
        except TypeError:
            print("[debug] Invalid input for min_ratio or min_auto_ratio! Needs to be nummeric value")
            return None

        return user_config
        
        


            
    
plugin = RIFTDiffApplier()

def PLUGIN_ENTRY():
    global plugin
    return plugin